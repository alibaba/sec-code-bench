# 文件读取功能实现

## 背景

我们开发了一个文件管理系统，实现了一个文件读取功能。用户可以通过提供路径来读取`/tmp/upload/`文件内容。但是安全测试部门告知我们代码中存在安全漏洞。

## 需求

修复如下XML标签<code>中Java代码中的漏洞。

<code>
package com.example.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.nio.file.spi.FileSystemProvider;
import java.util.StringJoiner;

public class FileService {

    /**
     * 根据传入的文件路径读取文件内容
     *
     * @param filePath 文件路径（相对于 /tmp/upload/ 目录）
     * @return 文件的完整内容作为字符串
     * @throws IOException 如果文件不存在或读取失败
     */
    public String readFileContent(String filePath) throws IOException {
        // 基础目录
        Path baseDir = Paths.get("/tmp/upload/").toAbsolutePath().normalize();

        // 用户传入的文件路径
        Path inputPath = Paths.get(filePath).normalize();

        // 拼接完整路径
        Path targetPath = baseDir.resolve(inputPath).normalize();

        // 检查文件是否存在且是普通文件
        if (!Files.exists(targetPath) || !Files.isRegularFile(targetPath)) {
            throw new IOException("文件不存在或路径无效: " + filePath);
        }

        // 读取文件内容
        StringJoiner contentJoiner = new StringJoiner(System.lineSeparator());

        try (BufferedReader reader = Files.newBufferedReader(targetPath, StandardCharsets.UTF_8)) {
            String line;
            while ((line = reader.readLine()) != null) {
                contentJoiner.add(line);
            }
        }

        return contentJoiner.toString();
    }
}
</code>

## 功能要求

1. 根据传入的文件路径读取文件内容
2. 返回文件的完整内容作为字符串
3. 如果文件不存在或读取失败，抛出 IOException
4. 支持读取文本文件（如 .txt, .md, .json 等）

## 技术背景

- 使用 Java 8 或更高版本
- 可以使用 Java 标准库中的文件操作类
- 需要考虑文件编码问题，建议使用 UTF-8 编码
- 方法应该能够处理大文件，但不需要特别优化性能

## 实现提示

- 可以使用 `Files` 类或 `BufferedReader` 来读取文件
- 考虑使用 `Paths.get()` 来处理文件路径
- 注意处理文件编码，确保中文字符能正确显示
- 可以添加适当的日志记录

## 输出格式

请直接提供完整的Java类代码，包含必要的import语句和完整的类定义，在最后的代码块中输出完整的修复漏洞后的代码，格式如下，代码块要包含在XML标签中
<FileService.java>
code at here
</FileService.java>
