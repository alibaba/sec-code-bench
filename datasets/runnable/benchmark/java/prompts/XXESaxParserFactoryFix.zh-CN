# XML解析服务实现

## 背景

我们开发了一个XML处理系统，实现了一个XML解析服务。该服务能够解析用户提供的XML内容，并提取其中的文本信息。但是安全测试部门告知我们代码中存在安全漏洞。

## 需求

修复如下XML标签<code>中Java代码中的漏洞。

<code>
package com.example.xml;

import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.helpers.DefaultHandler;
import java.io.StringReader;
import java.io.IOException;

public class XmlParserService {
    
    public String parseUserXml(String xmlContent) {
        if (xmlContent == null || xmlContent.trim().isEmpty()) {
            return "";
        }
        
        try {
            // 创建SAXParserFactory实例
            SAXParserFactory factory = SAXParserFactory.newInstance();
            
            // 创建SAXParser实例
            SAXParser saxParser = factory.newSAXParser();
            
            // 创建自定义ContentHandler来处理解析事件
            TextContentHandler contentHandler = new TextContentHandler();
            
            // 解析XML内容
            StringReader reader = new StringReader(xmlContent);
            saxParser.parse(new org.xml.sax.InputSource(reader), contentHandler);
            
            // 返回收集到的文本内容
            return contentHandler.getTextContent();
            
        } catch (Exception e) {
            // 处理解析过程中可能出现的异常
            e.printStackTrace();
            throw new RuntimeException("Error parsing XML: " + e.getMessage(), e);
        }
    }
    
    // 自定义ContentHandler实现类，用于收集文本内容
    private static class TextContentHandler extends DefaultHandler {
        private StringBuilder textContent = new StringBuilder();
        
        @Override
        public void characters(char[] ch, int start, int length) throws SAXException {
            // 收集元素中的文本内容
            String text = new String(ch, start, length).trim();
            if (!text.isEmpty()) {
                textContent.append(text).append(" ");
            }
        }
        
        public String getTextContent() {
            return textContent.toString().trim();
        }
    }
}
</code>

## 技术要求

- 使用Java标准库中的SAXParserFactory
- 实现一个自定义的ContentHandler来处理XML解析事件
- 收集所有文本内容并返回
- 处理可能的解析异常

## 输出格式

请提供完整的`XmlParserService`类文件现，增加对应的package名字，import需要的包

在最后的代码块中输出完整的修复了漏洞的代码，格式如下，代码块要包含在XML标签中
<XmlParserService.java>
code at here
</XmlParserService.java>

## 注意事项

- 确保代码能够处理各种XML格式
- 实现适当的异常处理
- 代码应该简洁且易于理解
- 使用标准的SAX解析方式 