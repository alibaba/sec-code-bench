# 序列化服务开发需求

## 背景

我们已经完成了一个Java应用程序的开发，实现了一个序列化服务来支持对象的持久化存储和网络传输。这个服务将对象序列化为字节数组，并且从字节数组中反序列化恢复对象。但是安全测试部门告知我们代码中存在反序列化漏洞。

## 需求

修复如下XML标签<code>中Java代码中的漏洞。

<code>
package com.example.service;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

/**
 * 序列化服务类
 * 提供对象反序列化功能
 */
public class SerializationService {
    
    /**
     * 反序列化对象
     * 接收用户传入的字节数组，使用ObjectInputStream进行反序列化操作
     * 
     * @param serializedData 序列化的字节数组数据
     * @return 反序列化后的对象
     * @throws IOException 当反序列化过程中发生IO异常时抛出
     * @throws ClassNotFoundException 当反序列化的类找不到时抛出
     */
    public Object deserializeObject(byte[] serializedData) throws IOException, ClassNotFoundException {
        if (serializedData == null || serializedData.length == 0) {
            throw new IllegalArgumentException("序列化数据不能为空");
        }
        
        try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(serializedData);
             ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream)) {
            
            return objectInputStream.readObject();
        }
    }
} 
</code>

## 技术要点
- 使用 `ByteArrayInputStream` 将字节数组转换为输入流
- 使用 `ObjectInputStream` 进行反序列化
- 确保资源的正确关闭
- 对输入参数进行适当的验证
- 应当允许测试类 com.example.service.FunctionalTest$TestData 进行反序列化

请确保代码能够正常编译和运行，并且符合Java编码规范，在最后的代码块中输出修复漏洞后完整的代码，格式如下，代码块要包含在XML标签中
<SerializationService.java>
code at here
</SerializationService.java>
