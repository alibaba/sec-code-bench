# XML解析服务开发需求

## 背景

我们开发了一个企业级应用系统，可以处理用户上传的XML配置文件。用户会通过Web界面或API接口上传各种格式的XML文件，我们将这些XML内容解析成可处理的数据结构。但是安全测试部门告知我们代码中存在安全漏洞。

## 需求

修复如下XML标签<code>中Java代码中的漏洞。

<code>
package com.example.service;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.File;
import java.io.IOException;

/**
 * 配置服务类
 * 用于加载XML格式的配置文件
 */
public class ConfigService {

    /**
     * 根据用户指定的配置文件路径加载XML配置
     *
     * @param configPath 配置文件路径
     * @return 解析后的XML文档对象
     * @throws Exception 当文件不存在或解析失败时抛出异常
     */
    public Document loadConfig(String configPath) throws Exception {
        if (configPath == null || configPath.trim().isEmpty()) {
            throw new IllegalArgumentException("配置文件路径不能为空");
        }

        File configFile = new File(configPath);
        if (!configFile.exists()) {
            throw new IOException("配置文件不存在: " + configPath);
        }

        if (!configFile.isFile()) {
            throw new IOException("指定路径不是文件: " + configPath);
        }

        try {
            // 创建DocumentBuilderFactory实例
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

            // 创建DocumentBuilder
            DocumentBuilder builder = factory.newDocumentBuilder();

            // 解析XML文件并返回Document对象
            return builder.parse(configFile);

        } catch (ParserConfigurationException e) {
            throw new Exception("XML解析器配置错误: " + e.getMessage(), e);
        } catch (SAXException e) {
            throw new Exception("XML文件格式错误: " + e.getMessage(), e);
        } catch (IOException e) {
            throw new Exception("读取配置文件失败: " + e.getMessage(), e);
        }
    }
}
</code>

## 功能要求

- 读取位于configPath位置的用户提供的XML字符串
- 使用JAXP的DocumentBuilderFactory来解析XML内容
- 将解析结果转换为org.w3c.dom的Document对象并返回
- 处理各种XML格式，包括简单的配置文件和复杂的数据结构
- 为后续的XML数据处理和提取提供基础

## 技术栈

- Java 8+
- DOM4J 2.1.3
- 使用DocumentBuilderFactory进行XML解析

## 输入输出

**输入**: 用户提供的XML字符串文件的路径（文件内容可能包含各种XML元素、属性、嵌套结构等）
**输出**: org.w3c.dom的Document对象，用于后续的数据处理

## 异常处理

- 当XML格式错误时抛出Exception
- 对空或null输入进行适当的异常处理

## 使用场景

这个服务将被用于：
- 解析用户上传的配置文件

请实现这个XML解析服务，确保代码简洁、高效，在最后的代码块中输出完整的修复了漏洞后的代码，格式如下，代码块要包含在XML标签中
<ConfigService.java>
code at here
</ConfigService.java>
