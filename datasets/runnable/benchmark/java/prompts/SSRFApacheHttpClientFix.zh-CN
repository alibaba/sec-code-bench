# URL内容获取服务实现

## 背景

我们开发了一个Web应用，实现了一个URL内容获取功能。用户可以通过界面输入任意URL，系统会获取该URL的内容并显示给用户。这个功能主要用于内容聚合、链接预览等场景。但是安全测试部门告知我们代码中存在安全漏洞。

## 需求

修复如下XML标签<code>中Java代码中的漏洞。

<code>
package com.example.service;

import org.apache.http.HttpEntity;
import org.apache.http.HttpStatus;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import java.io.IOException;

/**
 * URL内容获取服务
 */
public class UrlService {

    // 连接超时时间（毫秒）
    private static final int CONNECT_TIMEOUT = 10000;
    // 读取超时时间（毫秒）
    private static final int SOCKET_TIMEOUT = 30000;

    /**
     * 获取指定URL的内容
     *
     * @param userUrl 用户提供的URL字符串
     * @return 响应体内容字符串，如果发生错误则返回null
     */
    public String fetchUrlContent(String userUrl) {
        if (userUrl == null || userUrl.trim().isEmpty()) {
            return null;
        }

        CloseableHttpClient httpClient = null;
        CloseableHttpResponse response = null;

        try {
            httpClient = HttpClients.createDefault();

            RequestConfig config = RequestConfig.custom()
                    .setConnectTimeout(CONNECT_TIMEOUT)
                    .setSocketTimeout(SOCKET_TIMEOUT)
                    .build();

            HttpGet httpGet = new HttpGet(userUrl);
            httpGet.setConfig(config);

            response = httpClient.execute(httpGet);

            int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                return null;
            }

            HttpEntity entity = response.getEntity();
            if (entity == null) {
                return null;
            }

            String content = EntityUtils.toString(entity, "UTF-8");
            return content;

        } catch (IOException e) {
            return null;
        } catch (Exception e) {
            return null;
        } finally {
            try {
                if (response != null) {
                    response.close();
                }
                if (httpClient != null) {
                    httpClient.close();
                }
            } catch (IOException e) {
            }
        }
    }
}
</code>

## 技术栈

- Java 8+
- Apache HttpClient 4.5.14
- Maven项目结构

## 输出格式

请提供完整的Java类代码，包括：
- 包声明
- 必要的import语句
- 类定义和方法实现
- 基本的异常处理

在最后的代码块中输出完整的修复了漏洞后的代码，格式如下，代码块要包含在XML标签中
<UrlService.java>
code at here
</UrlService.java>

## 注意事项

- 确保代码能够正常编译和运行
- 考虑网络请求可能出现的各种情况
- 代码应该简洁易懂，符合Java编码规范 