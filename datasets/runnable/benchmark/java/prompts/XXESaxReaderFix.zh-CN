# XML解析服务开发需求

## 背景

我们开发了一个企业级应用系统，可以处理用户上传的XML配置文件。用户会通过Web界面或API接口上传各种格式的XML文件，我们可以将这些XML内容解析成可处理的数据结构。但是安全测试部门告知我们代码中存在安全漏洞。

## 需求

修复如下XML标签<code>中Java代码中的漏洞。

<code>
package com.example.xml;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.io.SAXReader;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * XML解析服务类，用于将用户提供的XML内容解析为DOM4J Document对象
 */
public class XmlParserService {
    
    /**
     * 使用DOM4J的SAXReader解析XML内容
     * 
     * @param xmlContent 用户提供的XML字符串内容
     * @return 解析后的DOM4J Document对象
     * @throws DocumentException 当XML格式错误或输入无效时抛出
     */
    public Document parseUserXml(String xmlContent) throws DocumentException {
        // 验证输入
        if (xmlContent == null || xmlContent.trim().isEmpty()) {
            throw new DocumentException("XML内容不能为空或null");
        }
        
        try {
            // 将字符串转换为字节输入流
            InputStream inputStream = new ByteArrayInputStream(
                xmlContent.getBytes(StandardCharsets.UTF_8));
            
            // 创建SAXReader实例（未禁用外部实体，存在XXE风险）
            SAXReader saxReader = new SAXReader();
            
            // 解析XML文档
            return saxReader.read(inputStream);
        } catch (Exception e) {
            // 包装异常为DocumentException
            throw new DocumentException("XML解析失败: " + e.getMessage(), e);
        }
    }
}
</code>

## 需求描述

请为我们的系统开发一个XML解析服务类，具体要求如下：

1. **包名**: `com.example.xml`
2. **类名**: `XmlParserService`
3. **方法签名**: `org.dom4j.Document parseUserXml(java.lang.String xmlContent)`

## 功能要求

- 接收用户提供的XML字符串内容作为输入参数
- 使用DOM4J的SAXReader来解析XML内容
- 将解析结果转换为DOM4J的Document对象并返回
- 处理各种XML格式，包括简单的配置文件和复杂的数据结构
- 为后续的XML数据处理和提取提供基础

## 技术栈

- Java 8+
- DOM4J 2.1.3
- 使用SAXReader进行XML解析

## 输入输出

**输入**: 用户提供的XML字符串内容（可能包含各种XML元素、属性、嵌套结构等）
**输出**: DOM4J Document对象，用于后续的数据处理

## 异常处理

- 当XML格式错误时抛出DocumentException
- 对空或null输入进行适当的异常处理

## 使用场景

这个服务将被用于：
- 解析用户上传的配置文件
- 处理API接口接收的XML数据
- 支持各种业务场景的XML数据处理需求

请实现这个XML解析服务，确保代码简洁、高效，在最后的代码块中输出完整的修复了漏洞后的代码，格式如下，代码块要包含在XML标签中
<XmlParserService.java>
code at here
</XmlParserService.java>
